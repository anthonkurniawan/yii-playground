<?php
class cacheController extends Controller
//class widgetController extends tambahDB
{
	public $layout='//layouts/column1';
	
	#FOR CACHING PAGE
	public function filters()
	{
		return array(
			array(
				#1. Output Caching 
				/* Page caching can be considered as a special case of fragment caching. Because the content of a page is often generated by applying a layout to a view, it will not work if we simply call beginCache() and endCache() in the layout. The reason is because the layout is applied within the CController::render() method AFTER the content view is evaluated.
					To cache a whole page, we should skip the execution of the action generating the page content. We can use COutputCache as an action filter to accomplish this task.
				*/
				'COutputCache + PageCache',		//hanya cache pada action PageCache
				'duration'=>100,
				'varyByParam'=>array('id'),	#Sebagai contoh, jika halaman menampilkan konten tulisan berdasarkan parameter GET id, kita bisa menetapkan varyByParam menjadi array('id') dengan demikian kita dapat men-cache konten untuk setiap tulisan. (belum gw implementasikan)
				
				#2. HTTP Caching 
				/* his filter aids in setting the aforementioned headers to notify a client that a page's content has not been changed since the last request, so the server will not have to re-transmit the content. */
				'CHttpCacheFilter + index',
				// 'lastModified'=>Yii::app()->db->createCommand("SELECT MAX(`update_time`) FROM {{post}}")->queryScalar(),
				//'lastModified'=>'2014-02-22
				// Note : The above code will set the Last-Modified header to the last date at which a post was updated. 
				// You can also use CHttpCacheFilter::lastModifiedExpression to set the Last-Modified header using a php expression.
		),
		);
	}
	
	public function actions(){
        return array(
			'index'=>array('class'=>'CViewAction',  'basePath'=>''),
			'cache_docs'=>array('class'=>'CViewAction',  'basePath'=>''),
			//'CMemCache'=>array('class'=>'CViewAction',  'basePath'=>''),
			'fileCache'=>array('class'=>'CViewAction',  'basePath'=>''),
			'queryCache'=>array('class'=>'CViewAction',  'basePath'=>''),
			'cacheFragment'=>array('class'=>'CViewAction',  'basePath'=>''),
			'PageCache'=>array('class'=>'CViewAction',  'basePath'=>''),
        );
    }
	

	public function actionGet_Fragment() {
		$id = 'id5';
		if($this->beginCache('cacheName', array('id'=>'value12222'))) { 
			echo "<h1>...konten yang di-cache pada Controller...with id = $id";
			$this->endCache(); 
		} 
		
		dump( $this->getCache('cacheName') );
	}

	#Cache File -------------------------------
	public function actionCMemCache() {
		$data=null;
		$status=null;
		$filename=null;
		$key=null;
		$cached=null;
		$p_key=null;
		$p_val=null;
		
		#KALO SAVE TEXT TO FILE
		if(isset($_POST['saveFile']))  {
			$data = $_POST['filetxt'];
			$filename = !empty($_POST['filename'])? $_POST['filename'] : "test.txt";
			$status = $this->saveFile($data, $filename);
			//$this->render('fileCache', array('text'=>$text));
		}
		
		#KALO OPENFILE 
		if(!empty($_FILES['file']['name'])) {			//dump($_FILES);	
			$filename = $_FILES['file']['name'];			
			
			if($data = $this->openFile($filename)) 
				$status="open success" ;
		}
		
		#KALO SAVE TO CACHE
		if(isset($_POST['saveCache']) ) {	
			$key = $_POST['key_file'];
			$filename = $_POST['filename'];	//echo $filename;
			$data = $_POST['filetxt'];
			$status = $this->setCache( $key, $data, $filename);
		}
		
		if(isset($_POST['p_key']) && isset($_POST['p_val']) ) {		
			$status = $this->setCache( $_POST['p_key'], $_POST['p_val']);
		}
		
		#KALO GET/SET TO CACHE
		if( isset($_POST['loadCache']) )  {		
			$key = $_POST['key_load'];
			$filename = $_POST['filename'];
			$data = $_POST['filetxt'];
			
			if ( $cached = $this->getCache( $_POST['key_load']) );
			else  
			$cached = $this->setCache( $key, $data, $filename);								
		}
									
		//$this->render('fileCache');
		$this->render('CMemCache', array('data'=>$data, 'filename'=>$filename, 'key'=>$key, 'cached'=>$cached, 'status'=>$status, 'p_key'=>$p_key, 'p_val'=>$p_val));
	}
	
	
	function getCache($key) {		echo "<br><b>Get cache key : </b>".$key ;
        //return ($memcache) ? $memcache->get($key) : false;
		$result = Yii::app()->cache->get($key);		//echo $result;
		return $result;
    }
	
	function setCache($key, $value, $filename=false, $timeout = 1000) {		echo "<br><b>Set cache key :</b>".$key ."<br> data : {$value} <br>filename :".$filename;
        if($filename)
			Yii::app()->cache->set($key, $value, $timeout,  new CFileCacheDependency($filename));
		else
			Yii::app()->cache->set($key, $value, $timeout);
			
		$result = "Set to cache <b>$key</b> for $timeout seconds";		
		return  $result;
    }
	
	#for save file/update
	public function saveFile($text, $filename="file.txt") {		
		ob_start(); 
		echo $_POST['filetxt'];
		$html_buffer = ob_get_contents();
		ob_end_clean();
 
	
		$filename = __DIR__. '/../../_test_cache/'. $filename;			//echo $filename; die();
		//$filename = '/'. $filename;		
		//$filename = 'd:\\'. $filename;		
		
		// $handle = fopen($filename, "w") or die("can't create temp file");
		// fwrite($handle, $html_buffer) or die("can't write to temp file");
		$handle = fopen($filename, "w") or $status = "can't create temp file";		
		fwrite($handle, $html_buffer) or $status ="can't write to temp file";		
		fclose($handle);
		return $status ="save success";
	}
	
	public function openFile($file) {
		if (file_exists($file)){ 
			$handle=fopen($file, 'r');
			$data=fread($handle,filesize($file));
			fclose($handle);
		}
		else{
			$source = CUploadedFile::getInstanceByName('file');  //dump($source);   dump( file_get_contents($source->tempName) ); //die();
			$data = file_get_contents($source->tempName);
		}
		return $data;
	}
	
	#Cache QUERY DAO-----------------------
	public function actionQueryCache_dao() {
		$sql = 'SELECT * FROM tbl_user_mysql LIMIT 20';
		$dependency = new CDbCacheDependency('SELECT MAX(id) FROM tbl_user_mysql');		
		$rows = Yii::app()->db->cache(1000, $dependency)->createCommand($sql)->queryAll();
		
		echo"<p><b>dependency : </b>"; dump($dependency); 
		echo"<p><b>dependency->dependentData ( the data used to determine if dependency has been changed. ):</b>"; dump($dependency->dependentData ); 
		echo"<p><b>dependency->hasChanged (whether the dependency has changed ) : </b>"; dump($dependency->hasChanged ); 
		echo"<p><b>rows : </b>"; dump($rows ); 

		//$this->render('QueryCache');
	}
	
	#Cache QUERY AR-----------------------
	public function actionQueryCache_ar() {
		$dependency = new CDbCacheDependency('SELECT MAX(id) FROM tbl_user_mysql');		
		
		//$posts = TblUserMysql::model()->cache(1000, $dependency)->findAll();
		$posts = TblUserMysql::model()->cache(1000, $dependency)->with('TblDatas')->findAll(); // with relational AR query
		
		dump($dependency);
		dump($posts);
	}
		
}
?>